{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgray\c0;}
\margl1440\margr1440\vieww17240\viewh9800\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs28 \cf0 Homework 3 - CS6320.003 README
\fs24 \
\

\f1\b0 \

\fs28 Part 1 - POS Tagging with Naive Bayes approach implementation
\fs24 \
\
To run the program please use the follow command :\
\
	
\f2\b\fs22 \cf2 \CocoaLigature0 python3 pos_naivebayes.py NLP6320_POSTaggedTrainingSet-Unix.txt \'93input sentence\'94\
\

\f3\b0 Please make sure to provide the 2 required arguments - the text file to train the POS and the input sentence to print out\
the probability. The input sentence should contain spaces between words and have a period at the end(preceded by a space\'94 \
\
Some sample test cases are provided below \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
	python3 pos_naivebayes.py NLP6320_POSTaggedTrainingSet-Unix.txt "Brainpower power ."\
\
	python3 pos_naivebayes.py NLP6320_POSTaggedTrainingSet-Unix.txt "Brainpower has the power ."\
\
	python3 pos_naivebayes.py NLP6320_POSTaggedTrainingSet-Unix.txt "Brainpower ."\
\
	python3 pos_naivebayes.py NLP6320_POSTaggedTrainingSet-Unix.txt "Hundreds of closed species ."\

\f1\fs24 \cf0 \CocoaLigature1 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\fs28 Part 2 - Viterbi algorithm implementation (recursive approach similar to slides)
\fs24 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 To run the program please use the follow command :\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f2\b\fs22 \cf2 \CocoaLigature0 	python3 viterbi.py \'93observation sequence sentence\'94\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f3\b0 Some sample test cases are provided below \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
	python3 viterbi.py "Janet will back the bill"\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
	
\f3\b0 python3 viterbi.py "will Janet back the bill"\

\f1\fs24 \cf0 \CocoaLigature1 \
	
\f3\fs22 \cf2 \CocoaLigature0 python3 viterbi.py "back the bill Janet will"
\f1\fs24 \cf0 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
}